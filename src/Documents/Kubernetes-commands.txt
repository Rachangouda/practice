 ------------------------
 Kubernitees helpers
 -------------------
 minikube start/status/stop
 kubectl version
 kubectl cluster-info #master details
 kubectl get nodes # show all nodes 
 kubectl get pod -n analytics
 #run app on kubernetes
 kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
 #To list your deployments
 kubectl get deployments
 # The kubectl command can create a proxy that will forward communications into the cluster-wide, private network. The proxy can be terminated by pressing control-C and won't show any output while its running.
 kubectl proxy
 kubectl get - list resources
kubectl describe - show detailed information about a resource
kubectl logs - print the logs from a container in a pod
kubectl exec - execute a command on a container in a pod

#list pods configmaps
kubectl get configmaps -n analytics
#print configuration
kubectl get configmaps ingress-controller-leader-ipfix-0-nginx -o yaml
#edit config then pod will be recreated
kubectl edit configmaps ingress-controller-leader-ipfix-0-nginx -o yaml -n analytics

#to save config of full system
kubectl get configmaps -o yaml -n analytics

#Service is load-balancing the traffic. To find out the exposed IP and Port 
kubectl describe services/kubernetes-bootcamp

#Run a Hello World application in your cluster
kubectl run hello-world --replicas=5 --labels="run=load-balancer-example" --image=gcr.io/google-samples/node-hello:1.0  --port=8080

#Create a Service object that exposes the deployment:
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service

#Display detailed information about the Service:
kubectl get services my-service
kubectl describe services my-service

#
kubectl delete services my-service
kubectl delete deployment hello-world

#get the IP address and port for the Service
minikube service <servicename> --url


























#list all containers in kubernetes
kubectl get pods --all-namespaces -o jsonpath="{..image}" |\
tr -s '[[:space:]]' '\n' |\
sort |\
uniq -c

#list container by pod
kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' | sort

#List Containers filtering by Pod label
kubectl get pods --all-namespaces -o=jsonpath="{..image}" -l app=nginx
